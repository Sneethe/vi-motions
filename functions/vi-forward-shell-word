#!/usr/bin/env zsh
# Implements forward/backward shell-word motions and shell-word-end motions
# Also see functions/Zle/modify-current-argument,
# some ideas were lifted from there.

# Arguments:
# $1: If matches b*, consider this a backward motion
# $2: If matches e*, consider this an end motion
emulate -L zsh
setopt extendedglob
zle -f vichange

local -i posword offset is_end=0

# variables from split-shell-arguments
local -a reply
local REPLY REPLY2

split-shell-arguments

[[ $2 = e* ]] && is_end=1
case $1 in
	b*) # backward
		(( offset = -2 ))
		# if at start of word, move backward
		(( REPLY = is_end || REPLY2 < 2 ? REPLY + 1 : REPLY + 2 ))
		;;
	*)
		(( offset = 2 ))
		# if an end movement but not at end, move backward
		(( is_end && $REPLY2 < ${#reply[1,REPLY]} )) && (( REPLY-- ))
		;;
esac

# even elements are shell arguments
(( posword = REPLY - REPLY & 1 + offset * ${NUMERIC:- 1} ))
(( posword < 1 )) && (( posword = 1 ))

# Length of all characters before current.
# Force use of character (not index) counting and join without IFS.
integer wordoff="${(cj..)#reply[1,posword-1]}"

(( CURSOR = wordoff + is_end * (${#reply[posword]} - 1) ))
